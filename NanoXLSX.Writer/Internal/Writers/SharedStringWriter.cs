/*
 * NanoXLSX is a small .NET library to generate and read XLSX (Microsoft Excel 2007 or newer) files in an easy and native way  
 * Copyright Raphael Stoeckli © 2025
 * This library is licensed under the MIT License.
 * You find a copy of the license in project folder or on: http://opensource.org/licenses/MIT
 */

using NanoXLSX.Interfaces;
using NanoXLSX.Interfaces.Writer;
using NanoXLSX.Registry;
using NanoXLSX.Utils;
using NanoXLSX.Utils.Xml;

namespace NanoXLSX.Internal.Writers
{
    /// <summary>
    /// Class to generate the shared strings XML file in a XLSX file.
    /// </summary>
    [NanoXlsxPlugIn(PlugInUUID = PlugInUUID.SHARED_STRING_WRITER)]
    internal class SharedStringWriter : ISharedStringWriter
    {
        private XmlElement sst;
        private ISortedMap sharedStrings;

        /// <summary>
        /// Gets or replaces the workbook instance, defined by the constructor
        /// </summary>
        public Workbook Workbook { get; set; }

        /// <summary>
        /// Gets the main XML element, generated by <see cref="Execute"/>
        /// </summary>
        public XmlElement XmlElement { get => sst; }

        /// <summary>
        /// Total count of shared string entries
        /// </summary>
        public int SharedStringsTotalCount { get; set; }

        /// <summary>
        /// Sorted map of shared strings
        /// </summary>
        public ISortedMap SharedStrings
        {
            get { return sharedStrings; }
        }

        /// <summary>
        /// Default constructor - Must be defined for instantiation of the plug-ins
        /// </summary>
        public SharedStringWriter()
        {
        }

        /// <summary>
        /// Initialization method (interface implementation)
        /// </summary>
        /// <param name="baseWriter">Base writer instance that holds any information for this writer</param>
        public void Init(IBaseWriter baseWriter)
        {
            this.Workbook = baseWriter.Workbook;
            sharedStrings = new SortedMap();
            SharedStringsTotalCount = 0;
        }

        /// <summary>
        /// Method to execute the main logic of the plug-in (interface implementation)
        /// </summary>
        public void Execute()
        {
            sst = XmlElement.CreateElement("sst");
            sst.AddDefaultXmlNameSpace("http://schemas.openxmlformats.org/spreadsheetml/2006/main");
            sst.AddAttribute("count", ParserUtils.ToString(SharedStringsTotalCount));
            sst.AddAttribute("uniqueCount", ParserUtils.ToString(sharedStrings.Count));
            foreach (IFormattableText text in sharedStrings.Keys)
            {
                XmlElement child = XmlElement.CreateElement("si");
                
                child.AddChildElement(text.GetXmlElement());
                sst.AddChildElement(child);
            }

            WriterPlugInHandler.HandleInlineQueuePlugins(ref sst, Workbook, PlugInUUID.SHARED_QUEUE_STRING_WRITER);
        }
    }
}
