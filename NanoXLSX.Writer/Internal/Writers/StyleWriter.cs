/*
 * NanoXLSX is a small .NET library to generate and read XLSX (Microsoft Excel 2007 or newer) files in an easy and native way  
 * Copyright Raphael Stoeckli © 2025
 * This library is licensed under the MIT License.
 * You find a copy of the license in project folder or on: http://opensource.org/licenses/MIT
 */

using System.Collections.Generic;
using NanoXLSX.Exceptions;
using NanoXLSX.Interfaces.Writer;
using NanoXLSX.Registry;
using NanoXLSX.Styles;
using NanoXLSX.Utils;
using NanoXLSX.Utils.Xml;
using static NanoXLSX.Styles.Border;
using static NanoXLSX.Styles.CellXf;
using static NanoXLSX.Styles.Fill;
using static NanoXLSX.Styles.Font;
using static NanoXLSX.Styles.NumberFormat;

namespace NanoXLSX.Internal.Writers
{
    /// <summary>
    /// Class to generate the style XML file in a XLSX file.
    /// </summary>
    [NanoXlsxPlugIn(PlugInUUID = PlugInUUID.STYLE_WRITER)]
    internal class StyleWriter : IPlugInWriter
    {

        private StyleManager styles;
        private XmlElement styleSheet;

        /// <summary>
        /// Gets or replaces the workbook instance, defined by the constructor
        /// </summary>
        public Workbook Workbook { get; set; }

        /// <summary>
        /// Gets the main XML element, generated by <see cref="Execute"/>
        /// </summary>
        public XmlElement XmlElement { get => styleSheet; }

        /// <summary>
        /// Default constructor - Must be defined for instantiation of the plug-ins
        /// </summary>
        internal StyleWriter()
        {
        }

        /// <summary>
        /// Initialization method (interface implementation)
        /// </summary>
        /// <param name="baseWriter">Base writer instance that holds any information for this writer</param>
        public void Init(IBaseWriter baseWriter)
        {
            this.styles = baseWriter.Styles;
            this.Workbook = baseWriter.Workbook;
        }

        /// <summary>
        /// Method to execute the main logic of the plug-in (interface implementation)
        /// </summary>
        public void Execute()
        {
            styleSheet = XmlElement.CreateElement("styleSheet");
            styleSheet.AddDefaultXmlNameSpace("http://schemas.openxmlformats.org/spreadsheetml/2006/main");
            styleSheet.AddNameSpaceAttribute("mc", "xmlns", "http://schemas.openxmlformats.org/markup-compatibility/2006");
            styleSheet.AddNameSpaceAttribute("x14ac", "xmlns", "http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac");
            styleSheet.AddAttribute("mc:Ignorable", "x14ac");
            int numFormatCount = styles.GetNumberFormatStyleNumber();
            int fontCount = styles.GetFontStyleNumber();
            int fillCount = styles.GetFillStyleNumber();
            int borderCount = styles.GetBorderStyleNumber();
            int styleCount = styles.GetStyleNumber();
            if (numFormatCount > 0)
            {
                XmlElement numFmts = XmlElement.CreateElementWithAttribute("numFmts", "count", ParserUtils.ToString(numFormatCount));
                numFmts.AddChildElements(getNumberFormatElements());
                styleSheet.AddChildElement(numFmts);
            }
            XmlElement fonts = XmlElement.CreateElementWithAttribute("fonts", "count", ParserUtils.ToString(fontCount));
            fonts.AddAttribute("knownFonts", "1", "x14ac");
            fonts.AddChildElements(getFontElements());
            styleSheet.AddChildElement(fonts);
            XmlElement fills = XmlElement.CreateElementWithAttribute("fills", "count", ParserUtils.ToString(fillCount));
            fills.AddChildElements(getFillElements());
            styleSheet.AddChildElement(fills);
            XmlElement borders = XmlElement.CreateElementWithAttribute("borders", "count", ParserUtils.ToString(borderCount));
            borders.AddChildElements(getBorderElements());
            styleSheet.AddChildElement(borders);
            XmlElement cellXfs = XmlElement.CreateElementWithAttribute("cellXfs", "count", ParserUtils.ToString(styleCount));
            cellXfs.AddChildElements(getCellXfElements());
            styleSheet.AddChildElement(cellXfs);
            if (Workbook.WorkbookMetadata != null)
            {
                XmlElement mruElement = getMruElement();
                if (mruElement != null)
                {
                    XmlElement colors = styleSheet.AddChildElement("colors");
                    colors.AddChildElement(mruElement);
                }
            }

            WriterPlugInHandler.HandleInlineQueuePlugins(ref styleSheet, Workbook, PlugInUUID.STYLE_INLINE_WRITER);
        }

        /// <summary>
        /// Method to get all border elements of the style
        /// </summary>
        /// <returns>IEnumerable of border elements</returns>
        private IEnumerable<XmlElement> getBorderElements()
        {
            Border[] borderStyles = styles.GetBorders();
            List<XmlElement> borders = new List<XmlElement>(borderStyles.Length);
            foreach (Border item in borderStyles)
            {
                XmlElement border = XmlElement.CreateElement("border");
                if (item.DiagonalDown && !item.DiagonalUp) { border.AddAttribute("diagonalDown", "1"); }
                else if (!item.DiagonalDown && item.DiagonalUp) { border.AddAttribute("diagonalUp", "1"); }
                else if (item.DiagonalDown && item.DiagonalUp)
                {
                    border.AddAttribute("diagonalDown", "1");
                    border.AddAttribute("diagonalUp", "1");
                }
                if (item.LeftStyle != StyleValue.none)
                {
                    XmlElement left = border.AddChildElementWithAttribute("left", "style", Border.GetStyleName(item.LeftStyle));
                    if (!string.IsNullOrEmpty(item.LeftColor)) { left.AddChildElementWithAttribute("color", "rgb", item.LeftColor); }
                    else { left.AddChildElementWithAttribute("color", "auto", "1"); }
                }
                else
                {
                    border.AddChildElement("left");
                }
                if (item.RightStyle != StyleValue.none)
                {
                    XmlElement right = border.AddChildElementWithAttribute("right", "style", Border.GetStyleName(item.RightStyle));
                    if (!string.IsNullOrEmpty(item.RightColor)) { right.AddChildElementWithAttribute("color", "rgb", item.RightColor); }
                    else { right.AddChildElementWithAttribute("color", "auto", "1"); }
                }
                else
                {
                    border.AddChildElement("right");
                }
                if (item.TopStyle != StyleValue.none)
                {
                    XmlElement top = border.AddChildElementWithAttribute("top", "style", Border.GetStyleName(item.TopStyle));
                    if (!string.IsNullOrEmpty(item.TopColor)) { top.AddChildElementWithAttribute("color", "rgb", item.TopColor); }
                    else { top.AddChildElementWithAttribute("color", "auto", "1"); }
                }
                else
                {
                    border.AddChildElement("top");
                }
                if (item.BottomStyle != StyleValue.none)
                {
                    XmlElement bottom = border.AddChildElementWithAttribute("bottom", "style", Border.GetStyleName(item.BottomStyle));
                    if (!string.IsNullOrEmpty(item.BottomColor)) { bottom.AddChildElementWithAttribute("color", "rgb", item.BottomColor); }
                    else { bottom.AddChildElementWithAttribute("color", "auto", "1"); }
                }
                else
                {
                    border.AddChildElement("bottom");
                }
                if (item.DiagonalStyle != StyleValue.none)
                {
                    XmlElement diagonal = border.AddChildElementWithAttribute("diagonal", "style", Border.GetStyleName(item.DiagonalStyle));
                    if (!string.IsNullOrEmpty(item.DiagonalColor)) { diagonal.AddChildElementWithAttribute("color", "rgb", item.DiagonalColor); }
                    else { diagonal.AddChildElementWithAttribute("color", "auto", "1"); }
                }
                else
                {
                    border.AddChildElement("diagonal");
                }
                borders.Add(border);
            }
            return borders;
        }

        /// <summary>
        /// Method to get all font elements of the style
        /// </summary>
        /// <returns>IEnumerable of font elements</returns>
        private IEnumerable<XmlElement> getFontElements()
        {
            Font[] fontStyles = styles.GetFonts();
            List<XmlElement> fonts = new List<XmlElement>(fontStyles.Length);
            foreach (Font item in fontStyles)
            {
                XmlElement font = XmlElement.CreateElement("font");
                if (item.Bold) { font.AddChildElement("b"); }
                if (item.Italic) { font.AddChildElement("i"); }
                if (item.Strike) { font.AddChildElement("strike"); }
                if (item.Underline != UnderlineValue.none)
                {
                    if (item.Underline == UnderlineValue.u_double) { font.AddChildElementWithAttribute("u", "val", "double"); }
                    else if (item.Underline == UnderlineValue.singleAccounting) { font.AddChildElementWithAttribute("u", "val", "singleAccounting"); }
                    else if (item.Underline == UnderlineValue.doubleAccounting) { font.AddChildElementWithAttribute("u", "val", "doubleAccounting"); }
                    else { font.AddChildElement("u"); }
                }
                if (item.VerticalAlign == VerticalTextAlignValue.subscript) { font.AddChildElementWithAttribute("vertAlign", "val", "subscript"); }
                else if (item.VerticalAlign == VerticalTextAlignValue.superscript) { font.AddChildElementWithAttribute("vertAlign", "val", "superscript"); }
                font.AddChildElementWithAttribute("sz", "val", ParserUtils.ToString(item.Size));
                if (string.IsNullOrEmpty(item.ColorValue))
                {
                    font.AddChildElementWithAttribute("color", "theme", ParserUtils.ToString((int)item.ColorTheme));
                }
                else
                {
                    font.AddChildElementWithAttribute("color", "rgb", item.ColorValue);
                }
                font.AddChildElementWithAttribute("name", "val", item.Name);
                font.AddChildElementWithAttribute("family", "val", ParserUtils.ToString((int)item.Family));
                if (item.Scheme != SchemeValue.none)
                {
                    if (item.Scheme == SchemeValue.major)
                    { font.AddChildElementWithAttribute("scheme", "val", "major"); }
                    else if (item.Scheme == SchemeValue.minor)
                    { font.AddChildElementWithAttribute("scheme", "val", "minor"); }
                }
                font.AddChildElementWithAttribute("charset", "val", ParserUtils.ToString((int)item.Charset));
                fonts.Add(font);
            }
            return fonts;
        }

        /// <summary>
        /// Method to get all fill elements of the style
        /// </summary>
        /// <returns>IEnumerable of fill elements</returns>
        private IEnumerable<XmlElement> getFillElements()
        {
            Fill[] fillStyles = styles.GetFills();
            List<XmlElement> fills = new List<XmlElement>(fillStyles.Length);
            foreach (Fill item in fillStyles)
            {
                XmlElement fill = XmlElement.CreateElement("fill");
                XmlElement patternFill = fill.AddChildElement("patternFill");
                patternFill.AddAttribute("patternType", Fill.GetPatternName(item.PatternFill));
                if (item.PatternFill == PatternValue.solid)
                {
                    patternFill.AddChildElementWithAttribute("fgColor", "rgb", item.ForegroundColor);
                    patternFill.AddChildElementWithAttribute("bgColor", "indexed", ParserUtils.ToString(item.IndexedColor));
                }
                else if (item.PatternFill == PatternValue.mediumGray || item.PatternFill == PatternValue.lightGray || item.PatternFill == PatternValue.gray0625 || item.PatternFill == PatternValue.darkGray)
                {
                    patternFill.AddChildElementWithAttribute("fgColor", "rgb", item.ForegroundColor);
                    if (!string.IsNullOrEmpty(item.BackgroundColor))
                    {
                        patternFill.AddChildElementWithAttribute("bgColor", "rgb", item.BackgroundColor);
                    }
                }
                fills.Add(fill);
            }
            return fills;
        }

        /// <summary>
        /// Method to get all numberFormat elements of the style
        /// </summary>
        /// <returns>IEnumerable of numberFormat elements</returns>
        private IEnumerable<XmlElement> getNumberFormatElements()
        {
            NumberFormat[] numberFormatStyles = styles.GetNumberFormats();
            List<XmlElement> elements = new List<XmlElement>(numberFormatStyles.Length);
            foreach (NumberFormat item in numberFormatStyles)
            {
                if (item.IsCustomFormat)
                {
                    if (string.IsNullOrEmpty(item.CustomFormatCode))
                    {
                        throw new FormatException("The number format style component with the ID " + ParserUtils.ToString(item.CustomFormatID) + " cannot be null or empty");
                    }
                    // OOXML: Escaping according to Chp.18.8.31
                    // TODO: v3> Add a custom format builder
                    XmlElement element = XmlElement.CreateElementWithAttribute("numFmt", "formatCode", XmlUtils.SanitizeXmlValue(item.CustomFormatCode));
                    element.AddAttribute("numFmtId", ParserUtils.ToString(item.CustomFormatID));
                    elements.Add(element);
                }
            }
            return elements;
        }

        /// <summary>
        /// Method to get all cellXf elements of the style
        /// </summary>
        /// <returns>IEnumerable of cellXf elements</returns>
        private IEnumerable<XmlElement> getCellXfElements()
        {
            Style[] styleItems = this.styles.GetStyles();
            List<XmlElement> xfs = new List<XmlElement>(styleItems.Length);
            foreach (Style style in styleItems)
            {
                int textRotation = style.CurrentCellXf.CalculateInternalRotation();
                XmlElement alignment = null;
                XmlElement protection = null;
                if (style.CurrentCellXf.HorizontalAlign != HorizontalAlignValue.none || style.CurrentCellXf.VerticalAlign != VerticalAlignValue.none || style.CurrentCellXf.Alignment != TextBreakValue.none || textRotation != 0)
                {
                    alignment = XmlElement.CreateElement("alignment");
                    if (style.CurrentCellXf.HorizontalAlign != HorizontalAlignValue.none)
                    {
                        if (style.CurrentCellXf.HorizontalAlign == HorizontalAlignValue.center) { alignment.AddAttribute("horizontal", "center"); }
                        else if (style.CurrentCellXf.HorizontalAlign == HorizontalAlignValue.right) { alignment.AddAttribute("horizontal", "right"); }
                        else if (style.CurrentCellXf.HorizontalAlign == HorizontalAlignValue.centerContinuous) { alignment.AddAttribute("horizontal", "centerContinuous"); }
                        else if (style.CurrentCellXf.HorizontalAlign == HorizontalAlignValue.distributed) { alignment.AddAttribute("horizontal", "distributed"); }
                        else if (style.CurrentCellXf.HorizontalAlign == HorizontalAlignValue.fill) { alignment.AddAttribute("horizontal", "fill"); }
                        else if (style.CurrentCellXf.HorizontalAlign == HorizontalAlignValue.general) { alignment.AddAttribute("horizontal", "general"); }
                        else if (style.CurrentCellXf.HorizontalAlign == HorizontalAlignValue.justify) { alignment.AddAttribute("horizontal", "justify"); }
                        else { alignment.AddAttribute("horizontal", "left"); }
                    }
                    if (style.CurrentCellXf.VerticalAlign != VerticalAlignValue.none)
                    {
                        if (style.CurrentCellXf.VerticalAlign == VerticalAlignValue.center) { alignment.AddAttribute("vertical", "center"); }
                        else if (style.CurrentCellXf.VerticalAlign == VerticalAlignValue.distributed) { alignment.AddAttribute("vertical", "distributed"); }
                        else if (style.CurrentCellXf.VerticalAlign == VerticalAlignValue.justify) { alignment.AddAttribute("vertical", "justify"); }
                        else if (style.CurrentCellXf.VerticalAlign == VerticalAlignValue.top) { alignment.AddAttribute("vertical", "top"); }
                        else { alignment.AddAttribute("vertical", "bottom"); }
                    }
                    if (style.CurrentCellXf.Indent > 0 &&
                        (style.CurrentCellXf.HorizontalAlign == HorizontalAlignValue.left
                        || style.CurrentCellXf.HorizontalAlign == HorizontalAlignValue.right
                        || style.CurrentCellXf.HorizontalAlign == HorizontalAlignValue.distributed))
                    {
                        alignment.AddAttribute("indent", ParserUtils.ToString(style.CurrentCellXf.Indent));
                    }
                    if (style.CurrentCellXf.Alignment != TextBreakValue.none)
                    {
                        if (style.CurrentCellXf.Alignment == TextBreakValue.shrinkToFit) { alignment.AddAttribute("shrinkToFit", "1"); }
                        else { alignment.AddAttribute("wrapText", "1"); }
                    }
                    if (textRotation != 0)
                    {
                        alignment.AddAttribute("textRotation", ParserUtils.ToString(textRotation));
                    }
                }
                if (style.CurrentCellXf.Hidden || style.CurrentCellXf.Locked)
                {
                    protection = XmlElement.CreateElement("protection");
                    if (style.CurrentCellXf.Hidden && style.CurrentCellXf.Locked)
                    {
                        protection.AddAttribute("locked", "1");
                        protection.AddAttribute("hidden", "1");
                    }
                    else if (style.CurrentCellXf.Hidden && !style.CurrentCellXf.Locked)
                    {
                        protection.AddAttribute("hidden", "1");
                        protection.AddAttribute("locked", "0");
                    }
                    else
                    {
                        protection.AddAttribute("hidden", "0");
                        protection.AddAttribute("locked", "1");
                    }
                }
                XmlElement xf = XmlElement.CreateElement("xf");
                if (style.CurrentNumberFormat.IsCustomFormat)
                {
                    xf.AddAttribute("numFmtId", ParserUtils.ToString(style.CurrentNumberFormat.CustomFormatID));
                }
                else
                {
                    int formatNumber = (int)style.CurrentNumberFormat.Number;
                    xf.AddAttribute("numFmtId", ParserUtils.ToString(formatNumber));
                }
                xf.AddAttribute("borderId", ParserUtils.ToString(style.CurrentBorder.InternalID.Value));
                xf.AddAttribute("fillId", ParserUtils.ToString(style.CurrentFill.InternalID.Value));
                xf.AddAttribute("fontId", ParserUtils.ToString(style.CurrentFont.InternalID.Value));
                if (!style.CurrentFont.IsDefaultFont)
                {
                    xf.AddAttribute("applyFont", "1");
                }
                if (style.CurrentFill.PatternFill != PatternValue.none)
                {
                    xf.AddAttribute("applyFill", "1");
                }
                if (!style.CurrentBorder.IsEmpty())
                {
                    xf.AddAttribute("applyBorder", "1");
                }
                if (alignment != null || style.CurrentCellXf.ForceApplyAlignment)
                {
                    xf.AddAttribute("applyAlignment", "1");
                }
                if (protection != null)
                {
                    xf.AddAttribute("applyProtection", "1");
                }
                if (style.CurrentNumberFormat.Number != FormatNumber.none)
                {
                    xf.AddAttribute("applyNumberFormat", "1");
                }
                if (alignment != null || protection != null)
                {
                    xf.AddChildElement(alignment);
                    xf.AddChildElement(protection);
                }
                xfs.Add(xf);
            }
            return xfs;
        }

        /// <summary>
        /// Method to get the Color MRU element of the style
        /// </summary>
        /// <returns>XmlElement, holding Color MRU information</returns>
        private XmlElement getMruElement()
        {
            XmlElement mruColors = null;
            List<string> tempColors = new List<string>();
            foreach (string item in ((Workbook)this.Workbook).GetMruColors())
            {
                if (item == Fill.DEFAULT_COLOR)
                {
                    continue;
                }
                if (!tempColors.Contains(item)) { tempColors.Add(item); }
            }
            if (tempColors.Count > 0)
            {
                mruColors = XmlElement.CreateElement("mruColors");
                foreach (string item in tempColors)
                {
                    mruColors.AddChildElementWithAttribute("color", "rgb", item);
                }
            }
            return mruColors;
        }
    }
}
